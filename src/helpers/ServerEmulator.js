// Generated by CoffeeScript 1.12.6

/**
 *
 */

(function() {
  var ServerEmulator,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ServerEmulator = (function() {
    ServerEmulator._CFG_ = {
      maxInitial: 100,
      maxIncome: 20,
      maxOutcome: 20,
      updateDelay: 300,
      responseTime: 100,
      updateChanse: 0.75
    };

    ServerEmulator._PROPS_ = ["updateDelay", "maxIncome", "maxOutcome", "updateChanse", "maxInitial", "responseTime"];

    ServerEmulator.parseUrl = function(url) {
      var arr, from, hasCfg, str, to;
      from = 1 + url.indexOf(":");
      to = url.indexOf("/");
      hasCfg = (from !== 0) && (from < to);
      if (hasCfg) {
        str = url.substring(from, to);
        arr = str.split("-");
      }
      return arr || [];
    };

    ServerEmulator.applyConfig = function(data, target) {
      var i, len, prop, ref, results, val;
      ref = this._PROPS_;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        prop = ref[i];
        val = parseFloat(data[prop]) || 0;
        results.push(target["_" + prop] = val || this._CFG_[prop]);
      }
      return results;
    };

    ServerEmulator.prototype._url = null;

    ServerEmulator.prototype._updPtr = 0;

    ServerEmulator.prototype._maxInitial = 0;

    ServerEmulator.prototype._maxIncome = 0;

    ServerEmulator.prototype._maxOutcome = 0;

    ServerEmulator.prototype._responseTime = 0;

    ServerEmulator.prototype._updateChanse = 0;

    ServerEmulator.prototype._updateDelay = 0;

    ServerEmulator.prototype.usersAmount = 0;

    function ServerEmulator(url) {
      this._update = bind(this._update, this);
      var cfg;
      this._url = url;
      cfg = ServerEmulator.parseUrl(url);
      ServerEmulator.applyConfig(cfg, this);
      this._run();
    }

    ServerEmulator.prototype.die = function() {};

    ServerEmulator.prototype._run = function() {
      this.usersAmount = XMath.rnd(this._maxInitial);
      return this._updPtr = setInterval((function(_this) {
        return function() {
          if (Math.random() < _this._updateChanse) {
            return _this._update();
          }
        };
      })(this), this._responseTime);
    };

    ServerEmulator.prototype._update = function() {
      var change, income, outcome;
      income = XMath.rnd(this._maxIncome);
      outcome = XMath.rnd(this._maxOutcome);
      change = Math.round(income - outcome);
      this.usersAmount += change;
      if (this.usersAmount < 0) {
        return this.usersAmount = 0;
      }
    };

    return ServerEmulator;

  })();

  window.ServerEmulator = ServerEmulator;

}).call(this);
