// Generated by CoffeeScript 1.12.6
(function() {
  var blueprint, pkg, strChart, strOptions, strTemplate, theWidgetInstConfig, theWidgetInstData;

  pkg = window.thewidget = window.thewidget || {};

  strTemplate = function() {
    return "<div class=\"the-widget\">\n<header>\n	<span>Site activity: <a href=\"\" title=\"{{@this.siteName(site)}}\">{{@this.siteName(site)}}</a></span>\n</header>\n<div class=\"thewidget-btn\" on-click=\"suicide\">&times;</div>\n<div class=\"thewidget-btn\" on-click=\"@this.toggle('options.shown')\">+</div>\n\n{{>chart}}\n\n<div class=\"summary\">\n	<div>lim: {{limUsers}}</div>\n	<div>min: {{minUsers}}</div>\n	<div>max: {{maxUsers}}</div>\n	<div>avg: {{avgUsers}}</div>\n</div>\n\n{{#if options.shown}}\n	{{>options}}\n{{/if}}\n</div>";
  };

  strChart = function() {
    return "<svg width=\"{{cfg.easel.width}}\" height=\"{{cfg.easel.height}}\">\n<defs>\n	<linearGradient\n			id=\"{{hotBgId}}\"\n			gradientUnits=\"objectBoundingBox\"\n			spreadMethod=\"pad\"\n			x1=\"0%\" x2=\"0%\" y1=\"0%\" y2=\"100%\">\n		<stop offset=\"25%\"\n		      style=\"stop-color: {{barColor}};\"/>\n		<stop offset=\"100%\"\n		      style=\"stop-color: black;\"/>\n	</linearGradient>\n</defs>\n\n<rect class=\"bg\"\n      x=\"0\" y=\"0\"\n      width=\"{{cfg.easel.width}}\" height=\"{{cfg.easel.height}}\"/>\n\n<line x1=\"1\" y1=\"{{cfg.baseLine}}\"\n      x2=\"{{cfg.easel.width-1}}\" y2=\"{{cfg.baseLine}}\"/>\n\n<g transform=\"translate({{0.5*cfg.bar.spacer}}, {{cfg.baseLine}}), scale(1, -1)\">\n	{{#each drawData:idx}}\n		{{#with bar}}\n			<rect\n				x=\"{{idx*(cfg.bar.width+cfg.bar.spacer)}}\"\n				y=\"{{y}}\"\n				width=\"{{w}}\"\n				height=\"{{h}}\"\n				fill=\"{{bg}}\"/>\n		{{/with}}\n		{{#with lbl}}\n			<text\n				class=\"{{cls}}\"\n				x=\"0\"\n				y=\"0\"\n				transform=\"scale(1, -1), rotate(-90), translate({{y}}, {{x}})\">{{text}}</text>\n		{{/with}}\n	{{/each}}\n</g>\n</svg>";
  };

  strOptions = function() {
    return "<div class=\"options\">\n<div class=\"frame layer-0\"></div>\n<div class=\"frame layer-1\"></div>\n<div class=\"form\">\n	<p class=\"caption\"><b>TheWidget::options</b></p>\n	<hr>\n	<p>Site (type or select):</p>\n	<input type=\"text\" value=\"{{options.siteTyped}}\" on-click=\"@this.set('options.siteSelected','')\"/>\n	<br>\n	<select value=\"{{options.siteSelected}}\" on-click=\"@this.set('options.siteTyped','')\">\n		<option></option>\n		{{#each options.sites}}\n			<option value=\"{{this}}\">{{@this.siteName(this)}}</option>\n		{{/each}}\n	</select>\n	<p>Users limit:</p>\n	<input type=\"number\" value=\"{{options.limUsers}}\"/>\n	<hr>\n	<button on-click=\"@this.toggle('options.shown')\">Cancel</button>\n	<button on-click=\"@this.applyOpts()\">Apply</button>\n</div>\n</div>";
  };

  theWidgetInstConfig = {
    historySize: 25,
    baseLine: 155,
    thisSite: "-=[ this site ]=-",
    easel: {
      width: 300,
      height: 160
    },
    bar: {
      hotBgId: "bg_box_hot_$param",
      tinyHeight: 25,
      maxHeight: 150,
      width: 10,
      spacer: 2
    },
    lbl: {
      clsTiny: "tiny",
      indentTinyBottom: 2,
      indentLeft: 8
    }
  };

  theWidgetInstData = function() {
    return {
      cfg: theWidgetInstConfig,
      options: {
        shown: false,
        sites: null,
        siteTyped: "",
        siteSelected: "",
        limUsers: 0
      },
      barColor: "black",
      hotColor: "black",
      hotBgId: theWidgetInstConfig.bar.hotBgId,
      drawData: null,
      site: null,
      limUsers: 0,
      minUsers: 0,
      maxUsers: 0,
      avgUsers: 0,
      instId: 0
    };
  };

  blueprint = {
    partials: {
      options: strOptions(),
      chart: strChart()
    },
    template: strTemplate(),
    data: theWidgetInstData,
    _CFG_: theWidgetInstConfig,
    _barColor: "black",
    _history: null,
    _historySum: 0,
    _historySteps: 0,
    _overwlown: false,
    _min: Number.MAX_VALUE,
    _max: 0,
    _avg: 0,
    _lim: 1,
    oninit: function() {
      var hotBgId;
      this._history = [];
      this.set("instId", this.instId);
      hotBgId = this.get("hotBgId");
      hotBgId = hotBgId.replace("$param", this.instId);
      this.set("hotBgId", hotBgId);
      this.set("hotColor", "url('#" + hotBgId + "')");
      this.set("drawData", []);
      this.set("options.sites", this.knownSites);
      return this.on({
        suicide: this.suicide,
        showOptions: this.showOptions
      });
    },
    setUsersLim: function(value) {
      this._lim = value;
      this.set("limUsers", value);
      this.set("options.limUsers", value);
      this.set("drawData", []);
      return this._refreshData(true);
    },
    setBarColor: function(value) {
      this._barColor = value;
      this.set("barColor", value);
      return this._refreshData(true);
    },
    setSite: function(value) {
      this.set("site", value);
      this.set("options.siteTyped", value);
      return this.set("options.siteSelected", value);
    },
    siteName: function(rawName) {
      if (rawName !== ".") {
        return rawName;
      } else {
        return this.get("cfg.thisSite");
      }
    },
    nextData: function(currentAmount) {
      if (currentAmount > 0) {
        this._overflown = this._history.length >= this._CFG_.historySize;
        if (this._overflown) {
          this._history.shift();
        }
        this._history.push(currentAmount);
        this._historySum += currentAmount;
        this._historySteps++;
        this._avg = Math.round(this._historySum / this._historySteps);
        this._min = Math.min(this._min, currentAmount);
        this._max = Math.max(this._max, currentAmount);
        this._refreshData();
        this.set("minUsers", this._min);
        this.set("maxUsers", this._max);
        return this.set("avgUsers", this._avg);
      }
    },
    suicide: function() {
      if (this.suicideCallback != null) {
        return this.suicideCallback(this);
      }
    },
    applyOpts: function() {
      var opts, site;
      opts = this.get("options");
      site = (opts.siteTyped || opts.siteSelected) || ".";
      if (site && (site !== this.get("site"))) {
        this.set("site", site);
        if (this.changeCallback != null) {
          this.changeCallback(this);
        }
      }
      if (this._lim !== opts.limUsers) {
        this.setUsersLim(opts.limUsers);
      }
      if (this.changeCallback) {
        this.changeCallback(this);
      }
      return this.toggle('options.shown');
    },
    _refreshData: function(isDirty) {
      var amount, data, limit, pointer;
      if (isDirty == null) {
        isDirty = false;
      }
      data = this.get("drawData");
      if (this._overflown) {
        data.shift();
      }
      if (isDirty) {
        data.length = 0;
      }
      pointer = -1;
      limit = this._history.length;
      while (++pointer < limit) {
        amount = this._history[pointer];
        data[pointer] = this._changeData(amount, pointer, data[pointer]);
      }
      return this.set("drawData", data);
    },
    _changeData: function(amount, index, data) {
      var bar, barH, barSize, cfg, isHot, isTiny, lbl;
      cfg = this._CFG_;
      bar = cfg.bar;
      lbl = cfg.lbl;
      if (data == null) {
        isHot = amount > this._lim;
        barSize = (!isHot ? amount / this._lim : 1);
        barH = barSize * bar.maxHeight;
        isTiny = barH < bar.tinyHeight;
        data = {
          bar: {
            bg: (isHot ? this.get("hotColor") : this._barColor),
            y: 0,
            w: bar.width,
            h: barH
          },
          lbl: {
            text: amount,
            cls: (isTiny ? lbl.clsTiny : ""),
            y: (isTiny ? barH + lbl.indentTinyBottom : 0.5 * barH)
          }
        };
      }
      data.bar.x = index * (bar.width + bar.spacer);
      data.lbl.x = data.bar.x + lbl.indentLeft;
      return data;
    }
  };

  pkg.TheWidget = Ractive.extend(blueprint);

}).call(this);
