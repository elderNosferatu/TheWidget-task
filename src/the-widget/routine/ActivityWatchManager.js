// Generated by CoffeeScript 1.12.6
(function() {
  var ActivityWatchManager, ActivityWatcher, pkg,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pkg = window.thewidget = window.thewidget || {};

  pkg = pkg.routine = pkg.routine || {};

  ActivityWatcher = pkg.ActivityWatcher;

  ActivityWatchManager = (function() {
    ActivityWatchManager.prototype._cache = null;

    ActivityWatchManager.prototype._cfg = null;

    function ActivityWatchManager(delay, serverUrl, fnParser, subsClbName) {
      this._watchCallback = bind(this._watchCallback, this);
      this._cache = {
        watch2subs: new Dictionary(),
        subs2watch: new Dictionary(),
        site2watch: new Dictionary()
      };
      this._cfg = {
        delay: delay || 0,
        serverUrl: serverUrl || "",
        fnParser: fnParser,
        subsClbName: subsClbName || ""
      };
    }

    ActivityWatchManager.prototype.getKnownSites = function() {
      return this._cache.site2watch.keys(false);
    };

    ActivityWatchManager.prototype.subscribe = function(subscriber, site) {
      var arrSubs, watcher;
      if (subscriber != null) {
        this.unsubscribe(subscriber);
        watcher = this._getWatcher(site);
        arrSubs = this._cache.watch2subs.get(watcher);
        arrSubs.push(subscriber);
        this._cache.subs2watch.set(subscriber, watcher);
        if (arrSubs.length > 0) {
          return watcher.awake();
        }
      }
    };

    ActivityWatchManager.prototype.unsubscribe = function(subscriber) {
      var arrSubs, idx, watcher;
      watcher = this._cache.subs2watch.get(subscriber);
      this._cache.subs2watch.del(subscriber);
      if ((subscriber != null) && (watcher != null)) {
        arrSubs = this._cache.watch2subs.get(watcher);
        idx = arrSubs.indexOf(subscriber);
        if (idx !== -1) {
          arrSubs.splice(idx, -1);
        }
        if (arrSubs.length === 0) {
          return watcher.sleep();
        }
      }
    };

    ActivityWatchManager.prototype._getWatcher = function(site) {
      var url, watcher;
      watcher = this._cache.site2watch.get(site);
      if (watcher == null) {
        url = site + "/" + this._cfg.serverUrl;
        watcher = new ActivityWatcher(url, this._cfg.delay, this._watchCallback);
        this._cache.site2watch.set(site, watcher);
        this._cache.watch2subs.set(watcher, []);
      }
      return watcher;
    };

    ActivityWatchManager.prototype._watchCallback = function(data, watcher) {
      var arrSubs, clbName, i, info, len, parser, results, subs;
      arrSubs = this._cache.watch2subs.get(watcher);
      parser = this._cfg.fnParser;
      info = (parser != null ? parser.call(null, data) : data);
      clbName = this._cfg.subsClbName;
      results = [];
      for (i = 0, len = arrSubs.length; i < len; i++) {
        subs = arrSubs[i];
        results.push(subs[clbName].call(subs, info));
      }
      return results;
    };

    return ActivityWatchManager;

  })();

  pkg.ActivityWatchManager = ActivityWatchManager;


  /*
  class ActivityMgr
  	_url: null
  	_delay: 0
  	_fnParser: null
  	_subsClbName: null
  
  	_watcher: new ActivityWatcher()
  	_subscribers: []
  
  	##*
     * @class ActivityManager
     * @param {string}  url  url, по якому можна отримати інфу про активність на сайті
     * @param {number}  delay  затримка між запитами про активність
     * @param {function|null}  fnParser функція перетворення серверних даних. Якщо не задана, то підписчики отримуватимуть дані в сирому виді
     * @param {string|null}  subsClbName  ім"я колбек-методу підписчика; якщо аргумент невизначений, або є порожнтою строкою, або у підписчика немає методу з таким іменем, то сам підписчик вважається колбек-функцією
     * @param {any} subscribers можливий набір бажаючих підписатись на інформацію про активність із вказаного url
  	 ##
  	constructor: (@_url, @_delay, @_fnParser, @_subsClbName, subscribers...) ->
  		@_watcher = new ActivityWatcher(@_url, @_delay, @_clbWatch)
  
  		if subscribers? and subscribers.length > 0
  			for asubs in subscribers
  				if asubs?
  					@addSubscriber(asubs)
  
  
  	addSubscriber: (instance) ->
  		if instance? and (-1 isnt @_subscribers.indexOf instance)
  			@_subscribers.push instance
  			if not @_watcher.isBusy()
  				@_watcher.awake()
  
  
  	removeSubscriber: (instance) ->
  		idx = @_subscribers.indexOf instance
  		if idx isnt -1
  			@_subscribers.splice idx, 1
  			if @_subscribers.length is 0
  				@_watcher.sleep()
  
  
  	_clbWatch: (data) =>
  		info = (if @_fnParser? then @_fnParser.call null, data else data)
  		for subs in @_subscribers
  			method = subs[@_subsClbName] or subs
  			scope = (if method is subs then null else subs)
  			method.call scope, info
  		 * З усіх сил стримуюсь не вставити в послідній рядок оператор `return` (див. розділ "Запитання" в файлі $proj$/Read.me)
  
  
  pkg.ActivityManager = ActivityManager
   */

}).call(this);
