// Generated by CoffeeScript 1.12.6
(function() {
  var InputManager, pkg,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pkg = window.thewidget = window.thewidget || {};

  pkg = pkg.routine = pkg.routine || {};

  InputManager = (function() {
    InputManager.prototype._cfg = {
      holderClass: null,
      addInstClass: null,
      clickCallback: null
    };

    InputManager.prototype._holders = null;

    InputManager.prototype._states = null;

    function InputManager(holderClass, addInstClass, clickCallback) {
      this._handleMouse = bind(this._handleMouse, this);
      this._cfg = {
        holderClass: holderClass,
        addInstClass: addInstClass,
        clickCallback: clickCallback
      };
      this._holders = [];
      this._states = [];
      this._run();
    }

    InputManager.prototype.setHolderState = function(holderIndex, isBusy) {
      return this._states[holderIndex] = isBusy;
    };

    InputManager.prototype.getHolderIndex = function(holderInstance) {
      return this._holders.indexOf(holderInstance);
    };

    InputManager.prototype.getHolder = function(holderIndex) {
      return this._holders[holderIndex];
    };

    InputManager.prototype._run = function() {
      var holder, i, len, temp;
      temp = $("." + this._cfg.holderClass);
      for (i = 0, len = temp.length; i < len; i++) {
        holder = temp[i];
        this._holders.push(holder);
        $(holder).on("mouseover click", this._handleMouse);
      }
      return this._states.length = this._holders.length;
    };

    InputManager.prototype._handleMouse = function(event) {
      var $target, callback, index, isBusy, isHolder, target;
      isHolder = event.target === event.currentTarget;
      if (isHolder) {
        target = event.target;
        $target = $(target);
        index = this._holders.indexOf(target);
        isBusy = this._states[index];
        switch (event.type) {
          case "click":
            if (!isBusy) {
              callback = this._cfg.clickCallback;
              if (callback != null) {
                return callback.call(null, target, index);
              }
            }
            break;
          case "mouseover":
            $target.addClass(this._cfg.addInstClass);
            return $target.one("mouseleave", this._handleMouse);
          case "mouseleave":
            return $target.removeClass(this._cfg.addInstClass);
        }
      }
    };

    return InputManager;

  })();

  pkg.InputManager = InputManager;

}).call(this);
