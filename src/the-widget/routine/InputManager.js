// Generated by CoffeeScript 1.12.6
(function() {
  var InputManager, pkg,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pkg = window.thewidget = window.thewidget || {};

  pkg = pkg.routine = pkg.routine || {};


  /**
   * Клас відповідає за роботу з порожніми плейсходерами для віждетів на сторінці
   */

  InputManager = (function() {
    InputManager.prototype._cfg = null;

    InputManager.prototype._holders = null;

    InputManager.prototype._states = null;

    function InputManager(holderTitle, holderClass, addInstClass, clickCallback) {
      this._handleMouse = bind(this._handleMouse, this);
      this._cfg = {
        holderClass: holderClass,
        holderTitle: holderTitle,
        addInstClass: addInstClass,
        clickCallback: clickCallback
      };
      this._holders = [];
      this._states = [];
      this._run();
    }

    InputManager.prototype.setHolderState = function(holderOrIndex, isBusy) {
      var holder, index;
      if ("number" === typeof holderOrIndex) {
        index = holderOrIndex;
        holder = this._holders[index];
      } else {
        holder = holderOrIndex;
        index = this._holders.indexOf(holder);
      }
      this._states[index] = isBusy;
      if (isBusy) {
        return $(holder).removeAttr("title");
      } else {
        return $(holder).attr("title", this._cfg.holderTitle);
      }
    };

    InputManager.prototype.getHolder = function(holderIndex) {
      return this._holders[holderIndex];
    };

    InputManager.prototype._run = function() {
      var holder, i, len, temp;
      temp = $("." + this._cfg.holderClass);
      temp.on("mouseover click", this._handleMouse);
      for (i = 0, len = temp.length; i < len; i++) {
        holder = temp[i];
        this._holders.push(holder);
        this.setHolderState(holder, false);
      }
    };

    InputManager.prototype._handleMouse = function(event) {
      var $target, callback, index, isBusy, isHolder, target;
      isHolder = event.target === event.currentTarget;
      if (isHolder) {
        target = event.target;
        $target = $(target);
        index = this._holders.indexOf(target);
        isBusy = this._states[index];
        if (!isBusy) {
          switch (event.type) {
            case "click":
              this.setHolderState(index, true);
              $target.removeClass(this._cfg.addInstClass);
              callback = this._cfg.clickCallback;
              if (callback != null) {
                return callback.call(null, target, index);
              }
              break;
            case "mouseover":
              $target.addClass(this._cfg.addInstClass);
              return $target.one("mouseleave", this._handleMouse);
            case "mouseleave":
              return $target.removeClass(this._cfg.addInstClass);
          }
        }
      }
    };

    return InputManager;

  })();

  pkg.InputManager = InputManager;

}).call(this);
