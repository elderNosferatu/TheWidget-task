// Generated by CoffeeScript 1.12.6
(function() {
  var InputManager, RegisterManager, TheWidget, TheWidgetManager, pkg,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pkg = window.thewidget = window.thewidget || {};

  InputManager = pkg.routine.InputManager;

  RegisterManager = pkg.routine.RegisterManager;

  TheWidget = pkg.TheWidget;

  TheWidgetManager = (function() {
    TheWidgetManager.prototype._cfg = null;

    TheWidgetManager.prototype._cache = null;

    TheWidgetManager.prototype._mgrRegister = null;

    TheWidgetManager.prototype._mgrInput = null;

    function TheWidgetManager(options) {
      var key, value;
      if (options == null) {
        options = null;
      }
      this._clbInstSuicide = bind(this._clbInstSuicide, this);
      this._clbInput = bind(this._clbInput, this);
      this._addFromReg = bind(this._addFromReg, this);
      this._cfg = {
        colors: ["gray", "navy", "green", "olive", "teal", "blue", "purple", "maroon", "red"],
        holderTitle: "add The-Widget",
        holderClass: "place_holder",
        addInstClass: "place_holder-mouseover",
        serverUrl: "the-widget.script",
        storeKey: "TheWidget:register",
        defaultSite: ".",
        limUsers: 150
      };
      this._cache = {};
      if (options != null) {
        for (key in options) {
          value = options[key];
          this._cfg[key] = value;
        }
      }
    }

    TheWidgetManager.prototype.run = function() {
      var cfg;
      cfg = this._cfg;
      this._mgrInput = new InputManager(cfg.holderTitle, cfg.holderClass, cfg.addInstClass, this._clbInput);
      this._mgrRegister = new RegisterManager(cfg.storeKey);
      this._mgrRegister.load();
      return this._mgrRegister.forEach(this._addFromReg);
    };

    TheWidgetManager.prototype._addInstance = function(holderInstance, holderIndex, instanceData) {
      var cfg, opts, theInst;
      if (instanceData == null) {
        instanceData = null;
      }
      cfg = this._cfg;
      opts = instanceData || {};
      opts.site = opts.site || cfg.defaultSite;
      opts.limUsers = opts.limUsers || cfg.limUsers;
      if (opts.color == null) {
        opts.barColor = XMath.arrRnd(cfg.colors);
      }
      theInst = new TheWidget({
        el: holderInstance,
        position: holderIndex,
        suicideCallback: this._clbInstSuicide,
        initialData: {
          instId: Date.now(),
          barColor: opts.barColor,
          limUsers: opts.limUsers,
          site: opts.site,
          serverUrl: cfg.serverUrl
        }
      });
      this._cache[holderIndex] = theInst;
      this._mgrInput.setHolderState(holderIndex, true);
      return this._mgrRegister.set(holderIndex, opts);
    };

    TheWidgetManager.prototype._removeInstance = function(instance, holderInstance, holderIndex) {
      delete this._cache[holderIndex];
      instance.teardown();
      this._mgrInput.setHolderState(holderIndex, false);
      return this._mgrRegister.set(holderIndex, null);
    };

    TheWidgetManager.prototype._addFromReg = function(holderIndex, instanceData) {
      var holder;
      holder = this._mgrInput.getHolder(holderIndex);
      return this._addInstance(holder, holderIndex, instanceData);
    };

    TheWidgetManager.prototype._clbInput = function(holderInstance, holderIndex) {
      this._addInstance(holderInstance, holderIndex);
      return this._mgrRegister.save();
    };

    TheWidgetManager.prototype._clbInstSuicide = function(instance) {
      var holderIndex, holderInstance;
      holderIndex = instance.position;
      holderInstance = this._mgrInput.getHolder(holderIndex);
      this._removeInstance(instance, holderInstance, holderIndex);
      return this._mgrRegister.save();
    };

    return TheWidgetManager;

  })();

  pkg.TheWidgetManager = TheWidgetManager;

}).call(this);
