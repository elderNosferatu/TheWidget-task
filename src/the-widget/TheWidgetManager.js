// Generated by CoffeeScript 1.12.6
(function() {
  var InputManager, TheWidget, TheWidgetManager, pkg,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pkg = window.thewidget = window.thewidget || {};

  InputManager = pkg.routine.InputManager;

  TheWidget = pkg.TheWidget;

  TheWidgetManager = (function() {
    TheWidgetManager.prototype._cfg = null;

    TheWidgetManager.prototype._cache = null;

    TheWidgetManager.prototype._register = null;

    TheWidgetManager.prototype._mgrInput = null;

    function TheWidgetManager(options) {
      var key, value;
      if (options == null) {
        options = null;
      }
      this._clbInstSuicide = bind(this._clbInstSuicide, this);
      this._clbInput = bind(this._clbInput, this);
      this._cfg = {
        colors: ["gray", "navy", "green", "olive", "teal", "blue", "purple", "maroon", "red"],
        holderTitle: "add The-Widget",
        holderClass: "place_holder",
        addInstClass: "place_holder-mouseover",
        serverUrl: "the-widget.script",
        storeKey: "TheWidget:register",
        defaultSite: ".",
        limUsers: 150
      };
      this._cache = {};
      this._register = {};
      if (options != null) {
        for (key in options) {
          value = options[key];
          this._cfg[key] = value;
        }
      }
    }

    TheWidgetManager.prototype.run = function() {
      var cfg;
      cfg = this._cfg;
      this._mgrInput = new InputManager(cfg.holderTitle, cfg.holderClass, cfg.addInstClass, this._clbInput);
      this._regLoad();
      return this._restorePrevSession();
    };

    TheWidgetManager.prototype._regLoad = function() {
      var error, temp;
      try {
        temp = localStorage.getItem(this._cfg.storeKey);
        temp = JSON.parse(temp);
      } catch (error1) {
        error = error1;
        null;
      }
      return this._register = temp || {};
    };

    TheWidgetManager.prototype._regSave = function() {
      var error, temp;
      try {
        temp = JSON.stringify(this._register);
        return localStorage.setItem(this._cfg.storeKey, temp);
      } catch (error1) {
        error = error1;
        return null;
      }
    };

    TheWidgetManager.prototype._restorePrevSession = function() {
      var holder, idx, key, ref, value;
      ref = this._register;
      for (key in ref) {
        value = ref[key];
        idx = parseInt(key) || 0;
        holder = this._mgrInput.getHolder(idx);
        this._addInstance(holder, idx, value);
      }
    };

    TheWidgetManager.prototype._addInstance = function(holderInstance, holderIndex, instanceData) {
      var cfg, opts, theInst;
      if (instanceData == null) {
        instanceData = null;
      }
      cfg = this._cfg;
      opts = instanceData || {};
      opts.site = opts.site || cfg.defaultSite;
      opts.limUsers = opts.limUsers || cfg.limUsers;
      if (opts.barColor == null) {
        opts.barColor = XMath.arrRnd(cfg.colors);
      }
      theInst = new TheWidget({
        el: holderInstance,
        position: holderIndex,
        suicideCallback: this._clbInstSuicide,
        initialData: {
          instId: Date.now(),
          barColor: opts.barColor,
          limUsers: opts.limUsers,
          site: opts.site,
          serverUrl: cfg.serverUrl
        }
      });
      this._cache[holderIndex] = theInst;
      this._register[holderIndex] = opts;
      return this._mgrInput.setHolderState(holderIndex, true);
    };

    TheWidgetManager.prototype._removeInstance = function(instance, holderInstance, holderIndex) {
      delete this._cache[holderIndex];
      delete this._register[holderIndex];
      instance.teardown();
      return this._mgrInput.setHolderState(holderIndex, false);
    };

    TheWidgetManager.prototype._clbInput = function(holderInstance, holderIndex) {
      this._addInstance(holderInstance, holderIndex);
      return this._regSave();
    };

    TheWidgetManager.prototype._clbInstSuicide = function(instance) {
      var holderIndex, holderInstance;
      holderIndex = instance.position;
      holderInstance = this._mgrInput.getHolder(holderIndex);
      this._removeInstance(instance, holderInstance, holderIndex);
      return this._regSave();
    };

    return TheWidgetManager;

  })();

  pkg.TheWidgetManager = TheWidgetManager;

}).call(this);
