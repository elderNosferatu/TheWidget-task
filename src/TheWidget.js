// Generated by CoffeeScript 1.12.6

/* Manager */

(function() {
  var ActivityWatcher, TheWidget, TheWidgetMnager, theWidgetInstConfig, theWidgetInstData,
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TheWidgetMnager = (function() {
    function TheWidgetMnager() {}

    TheWidgetMnager._CFG_ = {
      holderClass: "place_holder",
      addInstClass: "add_the-widget",
      serverUrl: "the-widget.script",
      storeKey: "TheWidget:register",
      colors: ["gray", "navy", "green", "olive", "teal", "blue", "purple", "maroon", "red"],
      requestDelay: 1e3,
      limUsers: 100,
      defaultSite: "www.it-is-a-stub-for-tests.testsite"
    };

    TheWidgetMnager._cache = {
      instances: []
    };

    TheWidgetMnager._holders = [];

    TheWidgetMnager._register = {};

    TheWidgetMnager._watcher = null;

    TheWidgetMnager.run = function() {
      var holder, i, j, ref, regData, temp, watchUrl;
      watchUrl = this._CFG_.defaultSite + "/" + this._CFG_.serverUrl;
      this._watcher = new ActivityWatcher(watchUrl, this._CFG_.requestDelay, this._watchCallback);
      this._watcher.sleep();
      temp = $("." + this._CFG_.holderClass);
      for (i = j = 0, ref = temp.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        holder = this._holders[i] = temp[i];
        $(holder).on("mouseover click", this._handleMouse);
      }
      regData = this._loadRegister();
      this._parseRegData(regData);
    };

    TheWidgetMnager.stop = function(clearStore) {
      clearStore;
    };

    TheWidgetMnager._getIndex = function(holderInst) {
      return this._holders.indexOf(holderInst);
    };

    TheWidgetMnager._isBusy = function(holderInstOrIdx) {
      var id, isId;
      isId = "number" === typeof holderInstOrIdx;
      if (isId === true) {
        id = holderInstOrIdx;
      } else {
        id = this._getIndex(holderInstOrIdx);
      }
      return this._register[id] != null;
    };

    TheWidgetMnager._addInstanceAt = function(holderIndex, instanceData, silence) {
      var ci, holder, opts, theInst;
      if (instanceData == null) {
        instanceData = null;
      }
      if (silence == null) {
        silence = false;
      }
      holder = this._holders[holderIndex];
      if (holder != null) {
        opts = instanceData || {};
        opts.site = opts.site || this._CFG_.defaultSite;
        opts.usersLim = this._CFG_.limUsers;
        if (opts.barColor == null) {
          ci = Math.floor(Math.random() * this._CFG_.colors.length);
          opts.barColor = this._CFG_.colors[ci];
        }
        theInst = new TheWidget({
          el: holder,
          instId: Date.now(),
          suicideCallback: this._instSuicideCallback
        });
        theInst.setBarColor(opts.barColor);
        theInst.setUsersLim(opts.usersLim);
        theInst.set("site", opts.site);
        this._register[holderIndex] = opts;
        this._cache.instances[holderIndex] = theInst;
        this._watcher.awake();
        if (!silence) {
          this._saveRegister();
        }
      }
    };

    TheWidgetMnager._removeInstanceAt = function(holderIndex) {
      var holder, instance;
      instance = this._cache.instances[holderIndex];
      holder = this._holders[holderIndex];
      if ((instance != null) && (holder != null)) {
        delete this._cache.instances[holderIndex];
        delete this._register[holderIndex];
        this._saveRegister();
        instance.teardown();
        if (this._cache.instances.length === 0) {
          this._watcher.sleep();
        }
      }
    };

    TheWidgetMnager._loadRegister = function() {
      var error, temp;
      try {
        temp = localStorage.getItem(this._CFG_.storeKey);
        temp = JSON.parse(temp);
      } catch (error1) {
        error = error1;
        console.log("Oops... Where is your `localStorage`? Or maybe my JSON-string was bad...", error);
      }
      return temp;
    };

    TheWidgetMnager._saveRegister = function() {
      var data, error;
      try {
        data = JSON.stringify(this._register);
        return localStorage.setItem(this._CFG_.storeKey, data);
      } catch (error1) {
        error = error1;
        return console.log("Oops... Can't save register. `JSON.stringify` or `localStoreage` bark on me.", error);
      }
    };

    TheWidgetMnager._parseRegData = function(data) {
      var idx, isHolderEmpty, isValidIdx;
      if (data != null) {
        for (idx in data) {
          if (!hasProp.call(data, idx)) continue;
          isValidIdx = idx < this._holders.length;
          isHolderEmpty = !this._isBusy(idx);
          if (isValidIdx && isHolderEmpty) {
            this._addInstanceAt(idx, data[idx], true);
          }
        }
      }
    };

    TheWidgetMnager._handleMouse = function(event) {
      var $target, index, isBusy, isHolder, target;
      isHolder = event.target === event.currentTarget;
      if (isHolder) {
        target = event.target;
        $target = $(target);
        isBusy = TheWidgetMnager._isBusy(target);
        switch (event.type) {
          case "click":
            if (!isBusy) {
              index = TheWidgetMnager._getIndex(target);
              TheWidgetMnager._addInstanceAt(index);
              return console.log("try add TheWidgetInst...");
            }
            break;
          case "mouseover":
            $target.addClass(TheWidgetMnager._CFG_.addInstClass);
            return $target.one("mouseleave", TheWidgetMnager._handleMouse);
          case "mouseleave":
            return $target.removeClass(TheWidgetMnager._CFG_.addInstClass);
        }
      }
    };

    TheWidgetMnager._watchCallback = function(data) {
      var inst, j, len, ref;
      ref = TheWidgetMnager._cache.instances;
      for (j = 0, len = ref.length; j < len; j++) {
        inst = ref[j];
        if (inst != null) {
          inst.nextData(data);
        }
      }
    };

    TheWidgetMnager._instSuicideCallback = function(selfDestroyer) {
      var index;
      index = TheWidgetMnager._cache.instances.indexOf(selfDestroyer);
      if (index > -1) {
        TheWidgetMnager._removeInstanceAt(index);
      }
    };

    return TheWidgetMnager;

  })();


  /* Instance */

  theWidgetInstConfig = {
    historySize: 25,
    baseLine: 155,
    easel: {
      width: 300,
      height: 160
    },
    bar: {
      hotBgId: "bg_box_hot_$param",
      tinyHeight: 25,
      maxHeight: 150,
      width: 10,
      spacer: 2
    },
    lbl: {
      clsTiny: "tiny",
      indentTinyBottom: 2,
      indentLeft: 8
    }
  };

  theWidgetInstData = function() {
    return {
      cfg: theWidgetInstConfig,
      barColor: "black",
      hotColor: "black",
      hotBgId: theWidgetInstConfig.bar.hotBgId,
      drawData: null,
      site: "nameless site",
      limUsers: 0,
      minUsers: 0,
      maxUsers: 0,
      avgUsers: 0
    };
  };

  TheWidget = Ractive.extend({
    template: "#template_thewidget",
    data: theWidgetInstData,
    _CFG_: theWidgetInstConfig,
    _dyingPtr: -1,
    _barColor: "black",
    _history: null,
    _historySum: 0,
    _historySteps: 0,
    _min: Number.MAX_VALUE,
    _max: 0,
    _avg: 0,
    _lim: 1,
    oninit: function() {
      var hotBgId;
      hotBgId = this.get("hotBgId");
      hotBgId = hotBgId.replace("$param", this.instId);
      this.set("hotBgId", hotBgId);
      this.set("hotColor", "url('#" + hotBgId + "')");
      this.set("drawData", []);
      this._history = [];
      this.on({
        suicide: this.suicide
      });
    },
    setUsersLim: function(value) {
      this._lim = value;
      this.set("limUsers", value);
    },
    setBarColor: function(value) {
      this._barColor = value;
      this.set("barColor", value);
      this._updateDrawData();
    },
    nextData: function(currentAmount) {
      var overflow;
      if (currentAmount > 0) {
        overflow = this._history.length >= this._CFG_.historySize;
        if (overflow) {
          this._history.shift();
        }
        this._history.push(currentAmount);
        this._historySum += currentAmount;
        this._historySteps++;
        this._avg = Math.round(this._historySum / this._historySteps);
        this._min = Math.min(this._min, currentAmount);
        this._max = Math.max(this._max, currentAmount);
        this._updateDrawData();
        this.set("minUsers", this._min);
        this.set("maxUsers", this._max);
        this.set("avgUsers", this._avg);
      }
    },
    suicide: function() {
      if (this.suicideCallback != null) {
        this.suicideCallback(this);
      }
    },
    _getInfoByIndex: function(index) {
      var BAR, CFG, LBL, amount, barSize, height, isAlive, isHot, isTiny, posX, posY, result;
      CFG = this._CFG_;
      BAR = CFG.bar;
      LBL = CFG.lbl;
      amount = this._history[index] || 0;
      isAlive = index < this._history.length;
      isHot = (amount ? amount >= this._lim : false);
      barSize = isHot ? 1 : amount / this._lim;
      height = barSize * BAR.maxHeight;
      posX = 0.5 * BAR.spacer + index * (BAR.width + BAR.spacer);
      posY = CFG.baseLine - height;
      isTiny = height < BAR.tinyHeight;
      result = {
        bar: {
          bg: isHot ? this.get("hotColor") : this._barColor,
          x: posX,
          y: posY,
          w: BAR.width,
          h: height
        },
        lbl: {
          text: isAlive ? amount : "",
          cls: isTiny ? LBL.clsTiny : "",
          x: posX + LBL.indentLeft,
          y: isTiny ? posY - LBL.indentTinyBottom : posY + 0.5 * height
        }
      };
      return result;
    },
    _updateDrawData: function() {
      var data, index, j, ref;
      for (index = j = 0, ref = this._CFG_.historySize; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
        data = this._getInfoByIndex(index);
        this.set("drawData[" + index + "]", data);
      }
    }
  });


  /* Watch-helper */

  ActivityWatcher = (function() {
    var _askPtr, _callback, _delay, _url;

    _url = "";

    _delay = 0;

    _callback = null;

    _askPtr = -1;

    function ActivityWatcher(url, _delay1, _callback1) {
      this.url = url;
      this._delay = _delay1;
      this._callback = _callback1;
      this._receive = bind(this._receive, this);
      this._ask = bind(this._ask, this);
      this.awake();
      return;
    }

    ActivityWatcher.prototype.awake = function() {
      if (this._askPtr === -1) {
        this._askPtr = 0;
        this._ask();
      }
    };

    ActivityWatcher.prototype.sleep = function() {
      clearTimeout(this._askPtr);
      this._askPtr = -1;
    };

    ActivityWatcher.prototype._ask = function() {
      jQWERTY.post(this._url, this._receive);
    };

    ActivityWatcher.prototype._receive = function(data) {
      this._callback(data);
      this._askPtr = setTimeout(this._ask, this._delay);
    };

    return ActivityWatcher;

  })();


  /* EXPORT */

  window.TheWidgetManager = TheWidgetMnager;

}).call(this);
